# -*- coding: utf-8 -*-
"""AutonomousDeliveryCart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DaU5AvdUhXqY2KkqNxvNd17Qzzg2vgd0

# PWM Motor Control
"""



"""

*   Uni-directional Control
*   Turning

"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install RPi.GPIO

import RPi.GPIO as GPIO
import time

"""Uni-directional"""

# Use GPIO numbers not pin numbers
GPIO.setmode(GPIO.BCM)

# setup the PWM pins and digital output pins
pwm_pin1 = 18  # PWM pin connected to the first device
pwm_pin2 = 13  # PWM pin connected to the second device
digital_out_pin1 = 23  # Digital output pin
digital_out_pin2 = 24  # Digital output pin

# Set up the GPIO pins
GPIO.setup(pwm_pin1, GPIO.OUT)
GPIO.setup(pwm_pin2, GPIO.OUT)
GPIO.setup(digital_out_pin1, GPIO.OUT)
GPIO.setup(digital_out_pin2, GPIO.OUT)

# Create PWM instances
pwm1 = GPIO.PWM(pwm_pin1, 100)  # Initialize PWM on pwm_pin1 100Hz frequency
pwm2 = GPIO.PWM(pwm_pin2, 100)  # Initialize PWM on pwm_pin2 100Hz frequency

# Start PWM with 0% duty cycle
pwm1.start(0)
pwm2.start(0)

try:
    while True:
        # Set different duty cycles for each PWM signal
        pwm1.ChangeDutyCycle(40)  # Set first PWM to 40% duty cycle
        pwm2.ChangeDutyCycle(60)  # Set second PWM to 60% duty cycle

        # Turn on digital outputs
        GPIO.output(digital_out_pin1, True)
        GPIO.output(digital_out_pin2, True)

        # Wait for 1 second
        time.sleep(1)

        # Turn off digital outputs
        GPIO.output(digital_out_pin1, False)
        GPIO.output(digital_out_pin2, False)

        # Wait for 1 second
        time.sleep(1)

except KeyboardInterrupt:
    # Clean up on Ctrl+C exit
    pwm1.stop()
    pwm2.stop()
    GPIO.cleanup()

"""Turning Code"""

import RPi.GPIO as GPIO
import time

# Use GPIO numbers not pin numbers
GPIO.setmode(GPIO.BCM)

# setup the PWM pins for the wheels
left_wheel_pwm_pin = 18  # PWM pin connected to the left wheel
right_wheel_pwm_pin = 13  # PWM pin connected to the right wheel

# Set up the GPIO pins
GPIO.setup(left_wheel_pwm_pin, GPIO.OUT)
GPIO.setup(right_wheel_pwm_pin, GPIO.OUT)

# Create PWM instances with a common frequency
frequency = 100  # 100Hz frequency for both wheels
left_wheel_pwm = GPIO.PWM(left_wheel_pwm_pin, frequency)
right_wheel_pwm = GPIO.PWM(right_wheel_pwm_pin, frequency)

# Start PWM with 50% duty cycle for a constant speed
initial_duty_cycle = 50
left_wheel_pwm.start(initial_duty_cycle)
right_wheel_pwm.start(initial_duty_cycle)

def turn_robot(direction, turn_duration=1):
    """
    Turns the robot left or right at a constant speed by adjusting the PWM duty cycle.

    :param direction: 'left' or 'right' to determine turn direction.
    :param turn_duration: Duration in seconds for the turn.
    """
    if direction == 'left':
        left_wheel_pwm.ChangeDutyCycle(initial_duty_cycle - 10)  # Decrease left wheel speed
        right_wheel_pwm.ChangeDutyCycle(initial_duty_cycle)  # Keep right wheel speed constant
    elif direction == 'right':
        left_wheel_pwm.ChangeDutyCycle(initial_duty_cycle)  # Keep left wheel speed constant
        right_wheel_pwm.ChangeDutyCycle(initial_duty_cycle - 10)  # Decrease right wheel speed
    else:
        print("Invalid direction. Please choose 'left' or 'right'.")
        return

    time.sleep(turn_duration)  # Turn for the specified duration

    # Reset wheels to initial speed
    left_wheel_pwm.ChangeDutyCycle(initial_duty_cycle)
    right_wheel_pwm.ChangeDutyCycle(initial_duty_cycle)

try:
    # Example usage
    while True:
        turn_robot('left', 2)  # Turn left for 2 seconds
        time.sleep(1)  # Wait for 1 second
        turn_robot('right', 2)  # Turn right for 2 seconds
        time.sleep(1)  # Wait for 1 second

except KeyboardInterrupt:
    # Clean up on Ctrl+C exit
    left_wheel_pwm.stop()
    right_wheel_pwm.stop()
    GPIO.cleanup()

"""# Room Plate Detection"""



"""# Mapping and Navigation"""

